#+begin_HTML
---
layout: post
title: "オレオレlisp入門"
date: 2013-03-28 18:03
comments: true
categories: 
---
#+end_HTML
# Local Variables:
# octopress-export-org-to-md : post 
# End:


Lispでプログラミングをはじめるには何をすればいいのか、まさに直接的な
チュートリアルをつくろうと思い立ち、この記事を書き始めました。

*古いし読むに耐えない記事なので削除! (2016/3/30)*


# Common Lisp入門というともう今まで何度も何度も書かれてきたはずなので、今
# 更何を書くことがあるかと考えるのが当然なんですが、残念ながら、それらの
# 入門書が多数あるのにも関わらず使用者が少ない。
# 
# 自分の実体験からしても、やはりLispには何らかの情報不足の壁があって、参
# 加者を拒んでいるような感じです。実際、自分がアクティブにCommon Lispの活
# 動をできるようになったのはつい最近です。CLについて勉強し始めたのは2年前
# の夏でしたから、どうにもちょっと時間がかかりすぎている。
# 
# これはまったくまとまった記事ではありません。ただ、ダラダラと書くうちに、
# やはり自分が詰まったところが思い出されました。これがcl初心者への道標
# になればと思います。
# 
# #+HTML: <!-- more -->
# 
# * はじめの1/3
# 
# 注意！On Lispは初心者向けではありません!
# 「はじめの1/3」を終えてから読みましょう。
# 
# ** 環境を揃える
# 
# lispの開発環境を揃えるのは、本当にプログラミングに慣れていない人は
# [[http://common-lisp.net/project/lispbox/][Lispbox]] を使えばいいと思います。でも、正直・・・
# 
# 1. Emacsを入れろ！(どーん)
# 2. 処理系は迷う必要はない。とりあえず [[http://www.sbcl.org/][sbcl]] を入れろ！バイナリを落とし
#    てきて "sudo sh install.sh" と打ち込むだけです。今の所aptから落とし
#    てきてもまあ問題はありません。
# 3. 最後に、SLIMEを入れろ！これも今の所apt-getでも問題ありません。
# 
# エディタについては、Emacs-SLIMEが最強なのでこれ一択です。
# Vimな方面については、[[http://www.vim.org/scripts/script.php?script_id=2219][Limp]] をどうぞ、ですが、あまりおすすめしません。
# 処理系は、はじめのうちは迷う必要はありません。
# 速度が問題になってきたりして初めて必要になります。
# 
# 注意ですが、aptなどのパッケージ管理システムに入っているlispのソフトウェ
# アで、落としても良いのは上に挙げた2つぐらいしかありません。
# 他のものは、 *aptの古いバージョンが、quicklispなどからの最新版より優先さ
# れるという事態を発生させるときがあります。*
# 
# ** Practical Common Lisp を読み、真似をする
# 
# Practical Common Lisp ([[http://www.amazon.co.jp/%E5%AE%9F%E8%B7%B5Common-Lisp-Peter-Seibel/dp/4274067211][実践CommonLisp]]) を読んで、ソースコードを打ち込ん
# で動かしてください。動かさないと実感がわきません。今のうちに、SLIMEの使
# い方をわかっておいてください。
# 
# これをとりあえず2/3程度読んでください。ここまででも十分lispの便利さを
# 知れるはずですが、実は先はまだまだ長いのです。
# 
# ** ANSIで定義された型と、そのインターフェースを理解する
# 
# 次に必要なのが[[http://www.lispworks.com/documentation/HyperSpec/Front/Contents.htm][Hyperspec]] です。ここが自分にとって第一の関門でした。これ
# の存在を知らないと、どんな型があって、それにどんな関数を使うことができ
# るのか、全くわからなくなります。
# 
# ubuntuなどのLinuxディストリビューションなら、オフラインにHyperspecのコ
# ピーを保存して素早く見ることができるパッケージ(hyperspec)があります。
# SLIMEの =C-c C-d h= を沢山活用してください。どんな関数が用意されてい
# るのか、名前だけで良いので調べてください。
# 
# おそらく、型も関数も、量が多すぎて一度には覚えられないでしょう。stream
# やbit-vector、pathnameなどなどすべてを覚えられるはずがありません。まし
# てやCLOSを全部理解するのなんて、あまりにも骨になる作業です。必然的に、
# 後で必要になった時に何度も何度もhyperspecに立ち戻る必要があります。
# 
# ** パッケージについてちゃんと理解する
# 
# 上のことに付随したことですが、特にパッケージシステムについてはきちんと
# 理解してください。おそらく、読んだだけではわからないのですが、それでも、
# Practical Common Lispのパッケージの章と、Hyperspecの =defpackage= の章
# を読んでください。 =:export= =:import-from= =:shadowing-import-from=
# =:shadow= の4つがわかれば結構です。
# 
# * 次の1/3
# 
# さて、これで第一段階が漸く終わりです。
# ここまできて、lisp初心者は漸く「純」ANSI Common Lispの全体像に近づいた
# という程度なのです。
# 
# さて、Practical Common Lispの最後の章には `What's next?' という章が設け
# てあります。Peter Siebelはこの章でコミュニティやライブラリの探し方を伝
# えようとしているのですが、残念ながらそこに貼られているURLは古く、あまり
# 役に立ちません。そのためこの文書では、代わりになるより新しいポインタを
# 示し、実践CommonLispを読み終わったその後どうするかを具体的に説明します。
# 
# ** 環境設定
# 
# まず、 *quicklispをインストールしてください。*
# 
# + quicklisp :: http://www.quicklisp.org/beta/
# 
# たぶん、quicklispのウェブサイトを見ると、Practical Common LispやOn
# Lispを読んだだけでは出てこない、はじめて出てくる表記があるはずです。例
# えば、
# 
# + ql:quickload :: パッケージ指定シンボル。「:」ってなによ？
# + require と asdf :: 聞いてない!
# + .sbclrc :: 初期化ファイルって？
# 
# また、gitとsvn, cvsをインストールしてください。近年のライブラリは大抵
# gitで管理されています。多少古いものではsvnやcvsになります。
# 
# ** 細かなことを知る
# *** リードマクロ
# 
# おそらく、それまでの経験だけではリードマクロの存在を知らないはずです。
# はいhyperspecの復習。第二章の[[http://www.lispworks.com/documentation/HyperSpec/Body/02_.htm][Syntax]] を読んでください。
# このように、hyperspecには、初心者には想像のつかないような内容がま
# だまだ隠れています。これこそは、緻密な標準化事業の結果ANSI標準を獲得
# したCommon Lispの、その長い歴史のなせる技です。
# 
# *** asdfを知る
# 
# asdfは、沢山のファイルを読み込むときにその順番を指定し、コンパイルされ
# ていないものだけコンパイルするということを行うプログラムです。
# 他の言語での開発経験があるなら、makeに相当するものです。
# 
# 概要については、asdf Manualの[[http://common-lisp.net/project/asdf/asdf/Using-ASDF.html#Using-ASDF][第四章]] からよむと良いでしょう。まあ今のと
# ころは、 *ライブラリはrequireすれば使えるようになる* とだけ覚えておけば
# 大丈夫でしょう。しかし、ライブラリを自分で作る段階になった時には、asdf
# の知識は必ず必要になります。
# 
# *** sbclrcなどの「処理系依存」の要素の存在を知る
# 
# いずれ、bordeaux-threadsなどを扱うことで実感することにはなるでしょうが、
# 処理系のウェブサイト(この場合 http://www.sbcl.org/manual/index.html )か
# らマニュアルを見ておくべきです。理解する必要はありません。ただ、処理系
# によってこんなにも独自の拡張がされており、こんなに沢山の未だ知らぬ機能
# があるのだという事を実感していただければ。
# 
# ** ライブラリを探す
# 
# ライブラリは以下のようにして探します。今は方法を紹介するだけですので、
# 調べ始める前に次の章を見てください。
# 
# + [[http://www.cliki.net][Cliki.net]] :: Common Lispに関連するWikiです。…が、雑然としていて、あ
#                まりメンテナンスされていません。自分は頑張って更新したり
#                しているつもりです。まずはじめはCurrent Recommended
#                Libraries を見るべきでしょう。
# + [[http://blog.quicklisp.org/][quicklisp news]] :: quicklisp の更新情報を載せているブログです。
# 		    ここに乗っている更新情報を見れば、どのライブラリが
#                     生きているか(アクティブにメンテナンスされているか)
#                     がわかります。
# + github :: githubで、有名な開発者(xachやfareら)の見ているものをチェッ
#             クしてみましょう。
# + twitter,shibuya.lisp :: 日本人Lisperのブログや発言経由で情報を得られ
#      ます。
# + quicklisp :: =(ql:system-apropos string)= で、quicklispに登録されて
#                いる情報を探せます。
# + [[https://github.com/quicklisp/quicklisp-projects][quicklisp-project リポジトリ]] :: quicklispへの申請を待っているプロジェ
#      クトが issues にて管理人のxachにお願いを立てています。登録をする
#      には、プロジェクトの重要性・新規性、マルチプラットフォーム性など
#      をアピールしないといけないので、それぞれのプロジェクトの主張を見
#      れてためになります。
# + [[http://quickdocs.org/][quickdocs]] :: 深町さんによるドキュメンテーション・API検索エンジン。ド
#                キュメンテーションを見られるという事は、ライブラリのコ
#                ンセプトを得られるというのとほぼ同じです。
# 
# 探したら、次にquicklispのlocal-projectという概念を復習してください。通
# 常、 =(ql:quickload system)= でダウンロードしてきたプロジェクトは
# =~/quicklisp/dists/quicklisp/software/= 配下に保存されますが、それとは
# 別に、例えばquicklisp未申請のプロジェクトや、開発中のプロジェクト、人の
# ものだけれど自分用に改造しているものなどを取っておきたいですよね。そう
# いう時には、 =~/quicklisp/local-projects/= を使います。
# 
# 例えば、自分で新たにライブラリを作るときには、そこでプロジェクトのディ
# レクトリを作ります。人のものを改造する場合にも、 =git clone= などでそこ
# にプロジェクトをダウンロードします。
# 
# Clikiは、古くてもはやメンテされていないページがありますが、そのことにさ
# え気をつければ、wikiスタイルによるカテゴリ分けがなされているので、ある
# 程度目的に応じたライブラリを探しやすくなります。CLのライブラリは命名規
# 則がないから困りますよね〜。
# 
# ** 重要ライブラリを知る
# 
# Clikiの[[http://www.cliki.net/Current%20recommended%20libraries][Currently Recommended Library]]は *最重要チェック項目* です。特に、
# ファイル操作に関するもの( =cl-fad= や =osicat= )と、ユーティリティライ
# ブラリ(=alexandria= =iterate=)はチェックして下さい。
# 
# * 最後の1/3
# 最後の1/3になりました。ここで残されていることはあと3つ程です。
# この中には未だに自分も達成できていない点もあります。
# 
# ** 自分でライブラリを作りgithubに公開する
# これは最初の関門であり、最後のゴールでもあります。
# これを行うためには、 *良いインターフェースとは何か* というセンスないし
# 知識が無いといけません。また、asdfをきちんと理解する必要があります。
# 
# 深町英太郎さん作のcl-projectというライブラリがありまして、初めてライブ
# ラリを作る人でも簡単！また、他の人のライブラリのasdファイルも見てみて
# ください。
# 
# + [[https://github.com/fukamachi/cl-project][cl-project]] :: プロジェクトのテンプレートを作るライブラリ
# 
# 深町さんはプログラムの書き方のスタイルについて興味深い記事を多数書いて
# いらっしゃっています。
# 
# また、asdfの延長として、 =xcvb= や =uiop= (旧asdf-driver)というライブラ
# リがあります。
# 
# また、ライブラリを書くならドキュメントは必須です。いくつかあるドキュメ
# ンテーション生成ライブラリを調べて試しておくべきです。
# 
# ** CLOSとMOPを理解する
# 
# CLOSは非常に奥が深いオブジェクトシステムで、他の言語にはない特徴をいく
# つも持っています。[[http://ja.wikipedia.org/wiki/CLOS][日本語版WikipediaのCLOSのページ]] は僕がかなり書きました
# ので、そこの例をみると理解の助けになるでしょう。もちろん、hyperspecも
# 読んでください。
# 
# [[http://alu.org/mop/index.html][MOP]] はCltl2で提唱された考えではあるみたいですが、処理系依存の部分が残っ
# ており、ANSI規格には入っていません。しかし、 /ぼちぼち/ それぞれの処理
# 系が対応してきています。そのため、 =closer-mop= というライブラリが、ポー
# タビリティのために作られています。
# 
# ** CFFIを理解する
# 
# [[http://common-lisp.net/project/cffi/][CFFI]] は、Cやその他の言語で書かれたライブラリを扱うためのフレームワーク
# です。 *UFFIは古いので推奨されません。* サイトにはチュートリアルとマニュ
# アルが載っています。
# 
# ** コンディション・リスタートシステムを理解する
# 
# これはPractical Common Lispも参考になるでしょう。
# 
# ** スレッドなどのプリミティブな処理
# 
# スレッドやデータベース、永続化、GC、最適化などをlispでどう表現す
# るのかを知る必要があります。まあ、そこらへんのコストは他の言語と変わり
# ない複雑さがあるのですが…。
# 
# ** 抽象的なプログラミング上の概念を身につける
# 
# パターンマッチやユニフィケーション、非決定的アルゴリズム、
# 継続渡しスタイル、Lispには型変数が無いこと、処理系内部のVOP(Virtual
# OP)処理など。
# 
# * 最後の仕上げ
# 
# + Interface Passing Style ほか, API設計について学ぶ
# + 複数の他の人のライブラリを読み、改善する
# + 国際的な Lisp world で名を上げる
# + つねに拡散が正でありがちなlispコミュニティを統合し、既存の問題を解
#   決し、lisperを増やす
# 
# うーん、なんか壮大すぎで適当(--;) でも、これで、cltl3の編纂などに精を出してくれる若い
# lisperの仲間が増えてくれると嬉しいです。リーダーシップを取って、言語と
# 言うよりコミュニティに存在する問題を解決しないといけませんね。
# 
# まあ、こんなかんじで、いまからlispを始めようという人は、どうやったらス
# ゴイlisperになれるのかの指針ができたのではないでしょうか。自分もまだま
# だですが、少ないながらも力添えができればと思います。
