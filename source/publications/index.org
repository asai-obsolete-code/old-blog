#+BEGIN_HTML
---
layout: page
title: "Publications"
date: 2014-01-17 00:24
comments: true
sharing: true
footer: true
---
#+END_HTML
# Local Variables:
# octopress-export-org-to-md: page
# End:

* Peer-Reviewed Papers (In Chronological Order)

1. Asai, M.; Fukunaga, A: 2016. Tiebreaking Strategies for Classical Planning Using A* Search.
   In /AAAI-2016/.  [[./aaai16.pdf][pdf]] .
2. Asai, M.; Fukunaga, A: 2015. Solving Large Scale Planning Problems with
   Component Macros. In /ICAPS2015/. [[./icaps15.pdf][pdf]] . CAP planner is
   available at https://github.com/guicho271828/CAP .
3. Asai, M.; Fukunaga, A: 2014. Applying Problem Decomposition to Extremely Large
   Planning Domains. Knowledge Engineering for Planning and Scheduling (KEPS) Workshop
   (ICAPS2014). [[file:keps14.pdf][pdf]] (+submitted version+ -> final version) [[./keps14-poster.pdf][poster]] [[./keps14/][presentation]]
4. Asai, M.; Fukunaga, A: 2014. Fully Automated Cyclic Planning for Large-Scale
   Manufacturing Domains. In /ICAPS2014/. [[file:icaps14.pdf][pdf]] [[./icaps14-poster.pdf][poster]] [[./icaps14/][presentation]]

# [[./icaps14-poster.pdf][poster]] [[./icaps14/][presentation]]

Presentation can be moved forward/backward with N/P key.
[[http://guicho271828.github.io/another-org-info/][For the further help and usage, click here]].

* Software

See [[https://github.com/guicho271828][my github repo]] for the latest activity!
#+HTML: 

+ [[https://github.com/guicho271828/CAP][CAP]] -- Component Abstraction Planner, which decompose the given problem,
  solve each subproblem, make the subplans into macros and then plans in an
  enhanced problem with those macros
  + 1.5 coverage in large domains!
  + Higer coverage in ipc2011 learning track, without learning time!
+ [[https://github.com/guicho271828/pddl][PDDL]] -- A Common Lisp library to read/write/analyse PDDL files. It has
  + a PDDL reader / parser
  + CLOS-based object oriented interface to analyse each objects
    + various useful accessors for objects e.g. predicate/propositions/action/types
    + methods like =(ground-action action objects)=
  + a pretty formatter
  + a simulator (STRIPS and action-costs are supported)
+ [[https://github.com/guicho271828/cell-assembly-pddl-models][CELL-ASSEMBLY]] -- The PDDL files and the explanation of a CELL-ASSEMBLY
  manufacturing domain, which appears at [Asai, Fukunaga ICAPS2014]
  + Is currently enlisted as one of [[http://users.cecs.anu.edu.au/~patrik/sigaps/index.php?n%3DMain.RealDomains][``Real and Realistic Planning Domains'']]
    by Patrik Haslum
+ [[https://github.com/guicho271828/aaai-template][aaai-template]] -- For [[http://orgmode.org/][org-mode]] lovers and reserchers of artificial intelligence. A
  set of scripts and templates for faster publishing of papers with [[http://www.aaai.org/][AAAI]]
  style.
  + Included =Makefile= automates
    + converting SVG images to grayscale pngs (I recommend Inkscape as an editor)
    + exporting =.org= files to =.tex= files
    + typeset the TeX files with pdflatex
    + checks for any *Overfull hbox*
    + checks for *paper limit*
  + Combination of simple scripts =make-periodically=
    would be useful. It waits for the changes, and if a change is detected, it runs
    =make=, then notify the result via =inotify= (pop up inteface available in gtk). 


